// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package di

import (
	"github.com/myapp/noname/api/application/usecase"
	"github.com/myapp/noname/api/infrastructure/db"
	"github.com/myapp/noname/api/infrastructure/repository"
	"github.com/myapp/noname/api/infrastructure/response"
	"github.com/myapp/noname/api/presentation/v1/handler"
)

// Injectors from wire.go:

func InitBeautician() handler.Beautician {
	conn := db.New()
	beautician := repository.NewBeautician(conn)
	responseBeautician := response.NewBeautician()
	menu := repository.NewMenu(conn)
	salon := repository.NewSalon(conn)
	user := repository.NewUser(conn)
	usecaseBeautician := usecase.NewBeautician(beautician, responseBeautician, menu, salon, user)
	handlerBeautician := handler.NewBeautician(usecaseBeautician)
	return handlerBeautician
}

func InitReservation() handler.Reservation {
	conn := db.New()
	user := repository.NewUser(conn)
	reservation := repository.NewReservation(conn)
	responseReservation := response.NewReservation()
	beautician := repository.NewBeautician(conn)
	salon := repository.NewSalon(conn)
	menu := repository.NewMenu(conn)
	usecaseReservation := usecase.NewReservation(user, reservation, responseReservation, beautician, salon, menu)
	handlerReservation := handler.NewReservation(usecaseReservation)
	return handlerReservation
}

func InitSalon() handler.Salon {
	conn := db.New()
	salon := repository.NewSalon(conn)
	responseSalon := response.NewSalon()
	user := repository.NewUser(conn)
	reservation := repository.NewReservation(conn)
	usecaseSalon := usecase.NewSalon(salon, responseSalon, user, reservation)
	handlerSalon := handler.NewSalon(usecaseSalon)
	return handlerSalon
}

func InitMenu() handler.Menu {
	conn := db.New()
	menu := repository.NewMenu(conn)
	responseMenu := response.NewMenu()
	user := repository.NewUser(conn)
	usecaseMenu := usecase.NewMenu(menu, responseMenu, user)
	handlerMenu := handler.NewMenu(usecaseMenu)
	return handlerMenu
}

func InitUser() handler.User {
	conn := db.New()
	user := repository.NewUser(conn)
	responseUser := response.NewUser()
	reservation := repository.NewReservation(conn)
	salon := repository.NewSalon(conn)
	usecaseUser := usecase.NewUser(user, responseUser, reservation, salon)
	handlerUser := handler.NewUser(usecaseUser)
	return handlerUser
}
