// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Beautician is an object representing the database table.
type Beautician struct {
	ID            int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	AuthID        string    `boil:"auth_id" json:"auth_id" toml:"auth_id" yaml:"auth_id"`
	RandID        string    `boil:"rand_id" json:"rand_id" toml:"rand_id" yaml:"rand_id"`
	FirstName     string    `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName      string    `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	FirstNameKana string    `boil:"first_name_kana" json:"first_name_kana" toml:"first_name_kana" yaml:"first_name_kana"`
	LastNameKana  string    `boil:"last_name_kana" json:"last_name_kana" toml:"last_name_kana" yaml:"last_name_kana"`
	Email         string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	PhoneNumber   string    `boil:"phone_number" json:"phone_number" toml:"phone_number" yaml:"phone_number"`
	LineID        string    `boil:"line_id" json:"line_id" toml:"line_id" yaml:"line_id"`
	InstagramID   string    `boil:"instagram_id" json:"instagram_id" toml:"instagram_id" yaml:"instagram_id"`
	Comment       string    `boil:"comment" json:"comment" toml:"comment" yaml:"comment"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *beauticianR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L beauticianL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BeauticianColumns = struct {
	ID            string
	AuthID        string
	RandID        string
	FirstName     string
	LastName      string
	FirstNameKana string
	LastNameKana  string
	Email         string
	PhoneNumber   string
	LineID        string
	InstagramID   string
	Comment       string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "id",
	AuthID:        "auth_id",
	RandID:        "rand_id",
	FirstName:     "first_name",
	LastName:      "last_name",
	FirstNameKana: "first_name_kana",
	LastNameKana:  "last_name_kana",
	Email:         "email",
	PhoneNumber:   "phone_number",
	LineID:        "line_id",
	InstagramID:   "instagram_id",
	Comment:       "comment",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
}

// Generated where

var BeauticianWhere = struct {
	ID            whereHelperint64
	AuthID        whereHelperstring
	RandID        whereHelperstring
	FirstName     whereHelperstring
	LastName      whereHelperstring
	FirstNameKana whereHelperstring
	LastNameKana  whereHelperstring
	Email         whereHelperstring
	PhoneNumber   whereHelperstring
	LineID        whereHelperstring
	InstagramID   whereHelperstring
	Comment       whereHelperstring
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
}{
	ID:            whereHelperint64{field: "`beauticians`.`id`"},
	AuthID:        whereHelperstring{field: "`beauticians`.`auth_id`"},
	RandID:        whereHelperstring{field: "`beauticians`.`rand_id`"},
	FirstName:     whereHelperstring{field: "`beauticians`.`first_name`"},
	LastName:      whereHelperstring{field: "`beauticians`.`last_name`"},
	FirstNameKana: whereHelperstring{field: "`beauticians`.`first_name_kana`"},
	LastNameKana:  whereHelperstring{field: "`beauticians`.`last_name_kana`"},
	Email:         whereHelperstring{field: "`beauticians`.`email`"},
	PhoneNumber:   whereHelperstring{field: "`beauticians`.`phone_number`"},
	LineID:        whereHelperstring{field: "`beauticians`.`line_id`"},
	InstagramID:   whereHelperstring{field: "`beauticians`.`instagram_id`"},
	Comment:       whereHelperstring{field: "`beauticians`.`comment`"},
	CreatedAt:     whereHelpertime_Time{field: "`beauticians`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`beauticians`.`updated_at`"},
	DeletedAt:     whereHelpernull_Time{field: "`beauticians`.`deleted_at`"},
}

// BeauticianRels is where relationship names are stored.
var BeauticianRels = struct {
	BeauticianMenus string
	Reservations    string
}{
	BeauticianMenus: "BeauticianMenus",
	Reservations:    "Reservations",
}

// beauticianR is where relationships are stored.
type beauticianR struct {
	BeauticianMenus BeauticianMenuSlice
	Reservations    ReservationSlice
}

// NewStruct creates a new relationship struct
func (*beauticianR) NewStruct() *beauticianR {
	return &beauticianR{}
}

// beauticianL is where Load methods for each relationship are stored.
type beauticianL struct{}

var (
	beauticianAllColumns            = []string{"id", "auth_id", "rand_id", "first_name", "last_name", "first_name_kana", "last_name_kana", "email", "phone_number", "line_id", "instagram_id", "comment", "created_at", "updated_at", "deleted_at"}
	beauticianColumnsWithoutDefault = []string{"auth_id", "rand_id", "first_name", "last_name", "first_name_kana", "last_name_kana", "email", "phone_number", "line_id", "instagram_id", "comment", "created_at", "updated_at", "deleted_at"}
	beauticianColumnsWithDefault    = []string{"id"}
	beauticianPrimaryKeyColumns     = []string{"id"}
)

type (
	// BeauticianSlice is an alias for a slice of pointers to Beautician.
	// This should generally be used opposed to []Beautician.
	BeauticianSlice []*Beautician
	// BeauticianHook is the signature for custom Beautician hook methods
	BeauticianHook func(context.Context, boil.ContextExecutor, *Beautician) error

	beauticianQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	beauticianType                 = reflect.TypeOf(&Beautician{})
	beauticianMapping              = queries.MakeStructMapping(beauticianType)
	beauticianPrimaryKeyMapping, _ = queries.BindMapping(beauticianType, beauticianMapping, beauticianPrimaryKeyColumns)
	beauticianInsertCacheMut       sync.RWMutex
	beauticianInsertCache          = make(map[string]insertCache)
	beauticianUpdateCacheMut       sync.RWMutex
	beauticianUpdateCache          = make(map[string]updateCache)
	beauticianUpsertCacheMut       sync.RWMutex
	beauticianUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var beauticianBeforeInsertHooks []BeauticianHook
var beauticianBeforeUpdateHooks []BeauticianHook
var beauticianBeforeDeleteHooks []BeauticianHook
var beauticianBeforeUpsertHooks []BeauticianHook

var beauticianAfterInsertHooks []BeauticianHook
var beauticianAfterSelectHooks []BeauticianHook
var beauticianAfterUpdateHooks []BeauticianHook
var beauticianAfterDeleteHooks []BeauticianHook
var beauticianAfterUpsertHooks []BeauticianHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Beautician) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Beautician) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Beautician) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Beautician) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Beautician) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Beautician) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Beautician) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Beautician) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Beautician) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBeauticianHook registers your hook function for all future operations.
func AddBeauticianHook(hookPoint boil.HookPoint, beauticianHook BeauticianHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		beauticianBeforeInsertHooks = append(beauticianBeforeInsertHooks, beauticianHook)
	case boil.BeforeUpdateHook:
		beauticianBeforeUpdateHooks = append(beauticianBeforeUpdateHooks, beauticianHook)
	case boil.BeforeDeleteHook:
		beauticianBeforeDeleteHooks = append(beauticianBeforeDeleteHooks, beauticianHook)
	case boil.BeforeUpsertHook:
		beauticianBeforeUpsertHooks = append(beauticianBeforeUpsertHooks, beauticianHook)
	case boil.AfterInsertHook:
		beauticianAfterInsertHooks = append(beauticianAfterInsertHooks, beauticianHook)
	case boil.AfterSelectHook:
		beauticianAfterSelectHooks = append(beauticianAfterSelectHooks, beauticianHook)
	case boil.AfterUpdateHook:
		beauticianAfterUpdateHooks = append(beauticianAfterUpdateHooks, beauticianHook)
	case boil.AfterDeleteHook:
		beauticianAfterDeleteHooks = append(beauticianAfterDeleteHooks, beauticianHook)
	case boil.AfterUpsertHook:
		beauticianAfterUpsertHooks = append(beauticianAfterUpsertHooks, beauticianHook)
	}
}

// One returns a single beautician record from the query.
func (q beauticianQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Beautician, error) {
	o := &Beautician{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for beauticians")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Beautician records from the query.
func (q beauticianQuery) All(ctx context.Context, exec boil.ContextExecutor) (BeauticianSlice, error) {
	var o []*Beautician

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Beautician slice")
	}

	if len(beauticianAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Beautician records in the query.
func (q beauticianQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count beauticians rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q beauticianQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if beauticians exists")
	}

	return count > 0, nil
}

// BeauticianMenus retrieves all the beautician_menu's BeauticianMenus with an executor.
func (o *Beautician) BeauticianMenus(mods ...qm.QueryMod) beauticianMenuQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`beautician_menus`.`beautician_id`=?", o.ID),
	)

	query := BeauticianMenus(queryMods...)
	queries.SetFrom(query.Query, "`beautician_menus`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`beautician_menus`.*"})
	}

	return query
}

// Reservations retrieves all the reservation's Reservations with an executor.
func (o *Beautician) Reservations(mods ...qm.QueryMod) reservationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`reservations`.`beautician_id`=?", o.ID),
	)

	query := Reservations(queryMods...)
	queries.SetFrom(query.Query, "`reservations`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`reservations`.*"})
	}

	return query
}

// LoadBeauticianMenus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (beauticianL) LoadBeauticianMenus(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBeautician interface{}, mods queries.Applicator) error {
	var slice []*Beautician
	var object *Beautician

	if singular {
		object = maybeBeautician.(*Beautician)
	} else {
		slice = *maybeBeautician.(*[]*Beautician)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &beauticianR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &beauticianR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`beautician_menus`), qm.WhereIn(`beautician_menus.beautician_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load beautician_menus")
	}

	var resultSlice []*BeauticianMenu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice beautician_menus")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on beautician_menus")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for beautician_menus")
	}

	if len(beauticianMenuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BeauticianMenus = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &beauticianMenuR{}
			}
			foreign.R.Beautician = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BeauticianID {
				local.R.BeauticianMenus = append(local.R.BeauticianMenus, foreign)
				if foreign.R == nil {
					foreign.R = &beauticianMenuR{}
				}
				foreign.R.Beautician = local
				break
			}
		}
	}

	return nil
}

// LoadReservations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (beauticianL) LoadReservations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBeautician interface{}, mods queries.Applicator) error {
	var slice []*Beautician
	var object *Beautician

	if singular {
		object = maybeBeautician.(*Beautician)
	} else {
		slice = *maybeBeautician.(*[]*Beautician)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &beauticianR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &beauticianR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`reservations`), qm.WhereIn(`reservations.beautician_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reservations")
	}

	var resultSlice []*Reservation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reservations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reservations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reservations")
	}

	if len(reservationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Reservations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reservationR{}
			}
			foreign.R.Beautician = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BeauticianID {
				local.R.Reservations = append(local.R.Reservations, foreign)
				if foreign.R == nil {
					foreign.R = &reservationR{}
				}
				foreign.R.Beautician = local
				break
			}
		}
	}

	return nil
}

// AddBeauticianMenus adds the given related objects to the existing relationships
// of the beautician, optionally inserting them as new records.
// Appends related to o.R.BeauticianMenus.
// Sets related.R.Beautician appropriately.
func (o *Beautician) AddBeauticianMenus(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BeauticianMenu) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BeauticianID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `beautician_menus` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"beautician_id"}),
				strmangle.WhereClause("`", "`", 0, beauticianMenuPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BeauticianID = o.ID
		}
	}

	if o.R == nil {
		o.R = &beauticianR{
			BeauticianMenus: related,
		}
	} else {
		o.R.BeauticianMenus = append(o.R.BeauticianMenus, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &beauticianMenuR{
				Beautician: o,
			}
		} else {
			rel.R.Beautician = o
		}
	}
	return nil
}

// AddReservations adds the given related objects to the existing relationships
// of the beautician, optionally inserting them as new records.
// Appends related to o.R.Reservations.
// Sets related.R.Beautician appropriately.
func (o *Beautician) AddReservations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reservation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BeauticianID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `reservations` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"beautician_id"}),
				strmangle.WhereClause("`", "`", 0, reservationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BeauticianID = o.ID
		}
	}

	if o.R == nil {
		o.R = &beauticianR{
			Reservations: related,
		}
	} else {
		o.R.Reservations = append(o.R.Reservations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reservationR{
				Beautician: o,
			}
		} else {
			rel.R.Beautician = o
		}
	}
	return nil
}

// Beauticians retrieves all the records using an executor.
func Beauticians(mods ...qm.QueryMod) beauticianQuery {
	mods = append(mods, qm.From("`beauticians`"))
	return beauticianQuery{NewQuery(mods...)}
}

// FindBeautician retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBeautician(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Beautician, error) {
	beauticianObj := &Beautician{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `beauticians` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, beauticianObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from beauticians")
	}

	return beauticianObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Beautician) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no beauticians provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(beauticianColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	beauticianInsertCacheMut.RLock()
	cache, cached := beauticianInsertCache[key]
	beauticianInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			beauticianAllColumns,
			beauticianColumnsWithDefault,
			beauticianColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(beauticianType, beauticianMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(beauticianType, beauticianMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `beauticians` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `beauticians` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `beauticians` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, beauticianPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into beauticians")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == beauticianMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for beauticians")
	}

CacheNoHooks:
	if !cached {
		beauticianInsertCacheMut.Lock()
		beauticianInsertCache[key] = cache
		beauticianInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Beautician.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Beautician) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	beauticianUpdateCacheMut.RLock()
	cache, cached := beauticianUpdateCache[key]
	beauticianUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			beauticianAllColumns,
			beauticianPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update beauticians, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `beauticians` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, beauticianPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(beauticianType, beauticianMapping, append(wl, beauticianPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update beauticians row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for beauticians")
	}

	if !cached {
		beauticianUpdateCacheMut.Lock()
		beauticianUpdateCache[key] = cache
		beauticianUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q beauticianQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for beauticians")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for beauticians")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BeauticianSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), beauticianPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `beauticians` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, beauticianPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in beautician slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all beautician")
	}
	return rowsAff, nil
}

var mySQLBeauticianUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Beautician) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no beauticians provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(beauticianColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBeauticianUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	beauticianUpsertCacheMut.RLock()
	cache, cached := beauticianUpsertCache[key]
	beauticianUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			beauticianAllColumns,
			beauticianColumnsWithDefault,
			beauticianColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			beauticianAllColumns,
			beauticianPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("entity: unable to upsert beauticians, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "beauticians", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `beauticians` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(beauticianType, beauticianMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(beauticianType, beauticianMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert for beauticians")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == beauticianMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(beauticianType, beauticianMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entity: unable to retrieve unique values for beauticians")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for beauticians")
	}

CacheNoHooks:
	if !cached {
		beauticianUpsertCacheMut.Lock()
		beauticianUpsertCache[key] = cache
		beauticianUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Beautician record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Beautician) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Beautician provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), beauticianPrimaryKeyMapping)
	sql := "DELETE FROM `beauticians` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from beauticians")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for beauticians")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q beauticianQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no beauticianQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from beauticians")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for beauticians")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BeauticianSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(beauticianBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), beauticianPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `beauticians` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, beauticianPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from beautician slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for beauticians")
	}

	if len(beauticianAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Beautician) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBeautician(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BeauticianSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BeauticianSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), beauticianPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `beauticians`.* FROM `beauticians` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, beauticianPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in BeauticianSlice")
	}

	*o = slice

	return nil
}

// BeauticianExists checks if the Beautician row exists.
func BeauticianExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `beauticians` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if beauticians exists")
	}

	return exists, nil
}
