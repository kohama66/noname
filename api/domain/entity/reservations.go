// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Reservation is an object representing the database table.
type Reservation struct {
	ID           int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Date         time.Time `boil:"date" json:"date" toml:"date" yaml:"date"`
	Holiday      bool      `boil:"holiday" json:"holiday" toml:"holiday" yaml:"holiday"`
	SpaceID      int64     `boil:"space_id" json:"space_id" toml:"space_id" yaml:"space_id"`
	BeauticianID int64     `boil:"beautician_id" json:"beautician_id" toml:"beautician_id" yaml:"beautician_id"`
	GuestID      int64     `boil:"guest_id" json:"guest_id" toml:"guest_id" yaml:"guest_id"`
	MenuID       int64     `boil:"menu_id" json:"menu_id" toml:"menu_id" yaml:"menu_id"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *reservationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reservationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReservationColumns = struct {
	ID           string
	Date         string
	Holiday      string
	SpaceID      string
	BeauticianID string
	GuestID      string
	MenuID       string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	ID:           "id",
	Date:         "date",
	Holiday:      "holiday",
	SpaceID:      "space_id",
	BeauticianID: "beautician_id",
	GuestID:      "guest_id",
	MenuID:       "menu_id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var ReservationWhere = struct {
	ID           whereHelperint64
	Date         whereHelpertime_Time
	Holiday      whereHelperbool
	SpaceID      whereHelperint64
	BeauticianID whereHelperint64
	GuestID      whereHelperint64
	MenuID       whereHelperint64
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
}{
	ID:           whereHelperint64{field: "`reservations`.`id`"},
	Date:         whereHelpertime_Time{field: "`reservations`.`date`"},
	Holiday:      whereHelperbool{field: "`reservations`.`holiday`"},
	SpaceID:      whereHelperint64{field: "`reservations`.`space_id`"},
	BeauticianID: whereHelperint64{field: "`reservations`.`beautician_id`"},
	GuestID:      whereHelperint64{field: "`reservations`.`guest_id`"},
	MenuID:       whereHelperint64{field: "`reservations`.`menu_id`"},
	CreatedAt:    whereHelpertime_Time{field: "`reservations`.`created_at`"},
	UpdatedAt:    whereHelpertime_Time{field: "`reservations`.`updated_at`"},
	DeletedAt:    whereHelpernull_Time{field: "`reservations`.`deleted_at`"},
}

// ReservationRels is where relationship names are stored.
var ReservationRels = struct {
	Beautician string
	Guest      string
	Menu       string
	Space      string
}{
	Beautician: "Beautician",
	Guest:      "Guest",
	Menu:       "Menu",
	Space:      "Space",
}

// reservationR is where relationships are stored.
type reservationR struct {
	Beautician *Beautician
	Guest      *Guest
	Menu       *Menu
	Space      *Space
}

// NewStruct creates a new relationship struct
func (*reservationR) NewStruct() *reservationR {
	return &reservationR{}
}

// reservationL is where Load methods for each relationship are stored.
type reservationL struct{}

var (
	reservationAllColumns            = []string{"id", "date", "holiday", "space_id", "beautician_id", "guest_id", "menu_id", "created_at", "updated_at", "deleted_at"}
	reservationColumnsWithoutDefault = []string{"date", "holiday", "space_id", "beautician_id", "guest_id", "menu_id", "created_at", "updated_at", "deleted_at"}
	reservationColumnsWithDefault    = []string{"id"}
	reservationPrimaryKeyColumns     = []string{"id"}
)

type (
	// ReservationSlice is an alias for a slice of pointers to Reservation.
	// This should generally be used opposed to []Reservation.
	ReservationSlice []*Reservation
	// ReservationHook is the signature for custom Reservation hook methods
	ReservationHook func(context.Context, boil.ContextExecutor, *Reservation) error

	reservationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reservationType                 = reflect.TypeOf(&Reservation{})
	reservationMapping              = queries.MakeStructMapping(reservationType)
	reservationPrimaryKeyMapping, _ = queries.BindMapping(reservationType, reservationMapping, reservationPrimaryKeyColumns)
	reservationInsertCacheMut       sync.RWMutex
	reservationInsertCache          = make(map[string]insertCache)
	reservationUpdateCacheMut       sync.RWMutex
	reservationUpdateCache          = make(map[string]updateCache)
	reservationUpsertCacheMut       sync.RWMutex
	reservationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reservationBeforeInsertHooks []ReservationHook
var reservationBeforeUpdateHooks []ReservationHook
var reservationBeforeDeleteHooks []ReservationHook
var reservationBeforeUpsertHooks []ReservationHook

var reservationAfterInsertHooks []ReservationHook
var reservationAfterSelectHooks []ReservationHook
var reservationAfterUpdateHooks []ReservationHook
var reservationAfterDeleteHooks []ReservationHook
var reservationAfterUpsertHooks []ReservationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Reservation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Reservation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Reservation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Reservation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Reservation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Reservation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Reservation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Reservation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Reservation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reservationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReservationHook registers your hook function for all future operations.
func AddReservationHook(hookPoint boil.HookPoint, reservationHook ReservationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		reservationBeforeInsertHooks = append(reservationBeforeInsertHooks, reservationHook)
	case boil.BeforeUpdateHook:
		reservationBeforeUpdateHooks = append(reservationBeforeUpdateHooks, reservationHook)
	case boil.BeforeDeleteHook:
		reservationBeforeDeleteHooks = append(reservationBeforeDeleteHooks, reservationHook)
	case boil.BeforeUpsertHook:
		reservationBeforeUpsertHooks = append(reservationBeforeUpsertHooks, reservationHook)
	case boil.AfterInsertHook:
		reservationAfterInsertHooks = append(reservationAfterInsertHooks, reservationHook)
	case boil.AfterSelectHook:
		reservationAfterSelectHooks = append(reservationAfterSelectHooks, reservationHook)
	case boil.AfterUpdateHook:
		reservationAfterUpdateHooks = append(reservationAfterUpdateHooks, reservationHook)
	case boil.AfterDeleteHook:
		reservationAfterDeleteHooks = append(reservationAfterDeleteHooks, reservationHook)
	case boil.AfterUpsertHook:
		reservationAfterUpsertHooks = append(reservationAfterUpsertHooks, reservationHook)
	}
}

// One returns a single reservation record from the query.
func (q reservationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Reservation, error) {
	o := &Reservation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for reservations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Reservation records from the query.
func (q reservationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReservationSlice, error) {
	var o []*Reservation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Reservation slice")
	}

	if len(reservationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Reservation records in the query.
func (q reservationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count reservations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q reservationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if reservations exists")
	}

	return count > 0, nil
}

// Beautician pointed to by the foreign key.
func (o *Reservation) Beautician(mods ...qm.QueryMod) beauticianQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.BeauticianID),
	}

	queryMods = append(queryMods, mods...)

	query := Beauticians(queryMods...)
	queries.SetFrom(query.Query, "`beauticians`")

	return query
}

// Guest pointed to by the foreign key.
func (o *Reservation) Guest(mods ...qm.QueryMod) guestQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.GuestID),
	}

	queryMods = append(queryMods, mods...)

	query := Guests(queryMods...)
	queries.SetFrom(query.Query, "`guests`")

	return query
}

// Menu pointed to by the foreign key.
func (o *Reservation) Menu(mods ...qm.QueryMod) menuQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.MenuID),
	}

	queryMods = append(queryMods, mods...)

	query := Menus(queryMods...)
	queries.SetFrom(query.Query, "`menus`")

	return query
}

// Space pointed to by the foreign key.
func (o *Reservation) Space(mods ...qm.QueryMod) spaceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.SpaceID),
	}

	queryMods = append(queryMods, mods...)

	query := Spaces(queryMods...)
	queries.SetFrom(query.Query, "`spaces`")

	return query
}

// LoadBeautician allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reservationL) LoadBeautician(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReservation interface{}, mods queries.Applicator) error {
	var slice []*Reservation
	var object *Reservation

	if singular {
		object = maybeReservation.(*Reservation)
	} else {
		slice = *maybeReservation.(*[]*Reservation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reservationR{}
		}
		args = append(args, object.BeauticianID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reservationR{}
			}

			for _, a := range args {
				if a == obj.BeauticianID {
					continue Outer
				}
			}

			args = append(args, obj.BeauticianID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`beauticians`), qm.WhereIn(`beauticians.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Beautician")
	}

	var resultSlice []*Beautician
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Beautician")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for beauticians")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for beauticians")
	}

	if len(reservationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Beautician = foreign
		if foreign.R == nil {
			foreign.R = &beauticianR{}
		}
		foreign.R.Reservations = append(foreign.R.Reservations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BeauticianID == foreign.ID {
				local.R.Beautician = foreign
				if foreign.R == nil {
					foreign.R = &beauticianR{}
				}
				foreign.R.Reservations = append(foreign.R.Reservations, local)
				break
			}
		}
	}

	return nil
}

// LoadGuest allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reservationL) LoadGuest(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReservation interface{}, mods queries.Applicator) error {
	var slice []*Reservation
	var object *Reservation

	if singular {
		object = maybeReservation.(*Reservation)
	} else {
		slice = *maybeReservation.(*[]*Reservation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reservationR{}
		}
		args = append(args, object.GuestID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reservationR{}
			}

			for _, a := range args {
				if a == obj.GuestID {
					continue Outer
				}
			}

			args = append(args, obj.GuestID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`guests`), qm.WhereIn(`guests.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Guest")
	}

	var resultSlice []*Guest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Guest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for guests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for guests")
	}

	if len(reservationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Guest = foreign
		if foreign.R == nil {
			foreign.R = &guestR{}
		}
		foreign.R.Reservations = append(foreign.R.Reservations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GuestID == foreign.ID {
				local.R.Guest = foreign
				if foreign.R == nil {
					foreign.R = &guestR{}
				}
				foreign.R.Reservations = append(foreign.R.Reservations, local)
				break
			}
		}
	}

	return nil
}

// LoadMenu allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reservationL) LoadMenu(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReservation interface{}, mods queries.Applicator) error {
	var slice []*Reservation
	var object *Reservation

	if singular {
		object = maybeReservation.(*Reservation)
	} else {
		slice = *maybeReservation.(*[]*Reservation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reservationR{}
		}
		args = append(args, object.MenuID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reservationR{}
			}

			for _, a := range args {
				if a == obj.MenuID {
					continue Outer
				}
			}

			args = append(args, obj.MenuID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`menus`), qm.WhereIn(`menus.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Menu")
	}

	var resultSlice []*Menu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Menu")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for menus")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menus")
	}

	if len(reservationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Menu = foreign
		if foreign.R == nil {
			foreign.R = &menuR{}
		}
		foreign.R.Reservations = append(foreign.R.Reservations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MenuID == foreign.ID {
				local.R.Menu = foreign
				if foreign.R == nil {
					foreign.R = &menuR{}
				}
				foreign.R.Reservations = append(foreign.R.Reservations, local)
				break
			}
		}
	}

	return nil
}

// LoadSpace allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reservationL) LoadSpace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReservation interface{}, mods queries.Applicator) error {
	var slice []*Reservation
	var object *Reservation

	if singular {
		object = maybeReservation.(*Reservation)
	} else {
		slice = *maybeReservation.(*[]*Reservation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &reservationR{}
		}
		args = append(args, object.SpaceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reservationR{}
			}

			for _, a := range args {
				if a == obj.SpaceID {
					continue Outer
				}
			}

			args = append(args, obj.SpaceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`spaces`), qm.WhereIn(`spaces.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Space")
	}

	var resultSlice []*Space
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Space")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for spaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spaces")
	}

	if len(reservationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Space = foreign
		if foreign.R == nil {
			foreign.R = &spaceR{}
		}
		foreign.R.Reservations = append(foreign.R.Reservations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SpaceID == foreign.ID {
				local.R.Space = foreign
				if foreign.R == nil {
					foreign.R = &spaceR{}
				}
				foreign.R.Reservations = append(foreign.R.Reservations, local)
				break
			}
		}
	}

	return nil
}

// SetBeautician of the reservation to the related item.
// Sets o.R.Beautician to related.
// Adds o to related.R.Reservations.
func (o *Reservation) SetBeautician(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Beautician) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `reservations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"beautician_id"}),
		strmangle.WhereClause("`", "`", 0, reservationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BeauticianID = related.ID
	if o.R == nil {
		o.R = &reservationR{
			Beautician: related,
		}
	} else {
		o.R.Beautician = related
	}

	if related.R == nil {
		related.R = &beauticianR{
			Reservations: ReservationSlice{o},
		}
	} else {
		related.R.Reservations = append(related.R.Reservations, o)
	}

	return nil
}

// SetGuest of the reservation to the related item.
// Sets o.R.Guest to related.
// Adds o to related.R.Reservations.
func (o *Reservation) SetGuest(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Guest) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `reservations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"guest_id"}),
		strmangle.WhereClause("`", "`", 0, reservationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GuestID = related.ID
	if o.R == nil {
		o.R = &reservationR{
			Guest: related,
		}
	} else {
		o.R.Guest = related
	}

	if related.R == nil {
		related.R = &guestR{
			Reservations: ReservationSlice{o},
		}
	} else {
		related.R.Reservations = append(related.R.Reservations, o)
	}

	return nil
}

// SetMenu of the reservation to the related item.
// Sets o.R.Menu to related.
// Adds o to related.R.Reservations.
func (o *Reservation) SetMenu(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Menu) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `reservations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"menu_id"}),
		strmangle.WhereClause("`", "`", 0, reservationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MenuID = related.ID
	if o.R == nil {
		o.R = &reservationR{
			Menu: related,
		}
	} else {
		o.R.Menu = related
	}

	if related.R == nil {
		related.R = &menuR{
			Reservations: ReservationSlice{o},
		}
	} else {
		related.R.Reservations = append(related.R.Reservations, o)
	}

	return nil
}

// SetSpace of the reservation to the related item.
// Sets o.R.Space to related.
// Adds o to related.R.Reservations.
func (o *Reservation) SetSpace(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Space) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `reservations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"space_id"}),
		strmangle.WhereClause("`", "`", 0, reservationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SpaceID = related.ID
	if o.R == nil {
		o.R = &reservationR{
			Space: related,
		}
	} else {
		o.R.Space = related
	}

	if related.R == nil {
		related.R = &spaceR{
			Reservations: ReservationSlice{o},
		}
	} else {
		related.R.Reservations = append(related.R.Reservations, o)
	}

	return nil
}

// Reservations retrieves all the records using an executor.
func Reservations(mods ...qm.QueryMod) reservationQuery {
	mods = append(mods, qm.From("`reservations`"))
	return reservationQuery{NewQuery(mods...)}
}

// FindReservation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReservation(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Reservation, error) {
	reservationObj := &Reservation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `reservations` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, reservationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from reservations")
	}

	return reservationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Reservation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no reservations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reservationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reservationInsertCacheMut.RLock()
	cache, cached := reservationInsertCache[key]
	reservationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reservationAllColumns,
			reservationColumnsWithDefault,
			reservationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reservationType, reservationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reservationType, reservationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `reservations` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `reservations` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `reservations` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, reservationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into reservations")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == reservationMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for reservations")
	}

CacheNoHooks:
	if !cached {
		reservationInsertCacheMut.Lock()
		reservationInsertCache[key] = cache
		reservationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Reservation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Reservation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reservationUpdateCacheMut.RLock()
	cache, cached := reservationUpdateCache[key]
	reservationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reservationAllColumns,
			reservationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update reservations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `reservations` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, reservationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reservationType, reservationMapping, append(wl, reservationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update reservations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for reservations")
	}

	if !cached {
		reservationUpdateCacheMut.Lock()
		reservationUpdateCache[key] = cache
		reservationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q reservationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for reservations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for reservations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReservationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reservationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `reservations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reservationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in reservation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all reservation")
	}
	return rowsAff, nil
}

var mySQLReservationUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Reservation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no reservations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reservationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLReservationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reservationUpsertCacheMut.RLock()
	cache, cached := reservationUpsertCache[key]
	reservationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			reservationAllColumns,
			reservationColumnsWithDefault,
			reservationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			reservationAllColumns,
			reservationPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("entity: unable to upsert reservations, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "reservations", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `reservations` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(reservationType, reservationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reservationType, reservationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert for reservations")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == reservationMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(reservationType, reservationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entity: unable to retrieve unique values for reservations")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for reservations")
	}

CacheNoHooks:
	if !cached {
		reservationUpsertCacheMut.Lock()
		reservationUpsertCache[key] = cache
		reservationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Reservation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Reservation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Reservation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reservationPrimaryKeyMapping)
	sql := "DELETE FROM `reservations` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from reservations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for reservations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q reservationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no reservationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from reservations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for reservations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReservationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reservationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reservationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `reservations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reservationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from reservation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for reservations")
	}

	if len(reservationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Reservation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReservation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReservationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReservationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reservationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `reservations`.* FROM `reservations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, reservationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in ReservationSlice")
	}

	*o = slice

	return nil
}

// ReservationExists checks if the Reservation row exists.
func ReservationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `reservations` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if reservations exists")
	}

	return exists, nil
}
