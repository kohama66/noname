// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Salon is an object representing the database table.
type Salon struct {
	ID           int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	RandID       string    `boil:"rand_id" json:"rand_id" toml:"rand_id" yaml:"rand_id"`
	Name         string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	PhoneNumber  string    `boil:"phone_number" json:"phone_number" toml:"phone_number" yaml:"phone_number"`
	OpeningHours string    `boil:"opening_hours" json:"opening_hours" toml:"opening_hours" yaml:"opening_hours"`
	ClosingHours string    `boil:"closing_hours" json:"closing_hours" toml:"closing_hours" yaml:"closing_hours"`
	PostalCode   string    `boil:"postal_code" json:"postal_code" toml:"postal_code" yaml:"postal_code"`
	Prefectures  string    `boil:"prefectures" json:"prefectures" toml:"prefectures" yaml:"prefectures"`
	City         string    `boil:"city" json:"city" toml:"city" yaml:"city"`
	Town         string    `boil:"town" json:"town" toml:"town" yaml:"town"`
	AddressCode  string    `boil:"address_code" json:"address_code" toml:"address_code" yaml:"address_code"`
	AddressOther string    `boil:"address_other" json:"address_other" toml:"address_other" yaml:"address_other"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *salonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L salonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SalonColumns = struct {
	ID           string
	RandID       string
	Name         string
	PhoneNumber  string
	OpeningHours string
	ClosingHours string
	PostalCode   string
	Prefectures  string
	City         string
	Town         string
	AddressCode  string
	AddressOther string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	ID:           "id",
	RandID:       "rand_id",
	Name:         "name",
	PhoneNumber:  "phone_number",
	OpeningHours: "opening_hours",
	ClosingHours: "closing_hours",
	PostalCode:   "postal_code",
	Prefectures:  "prefectures",
	City:         "city",
	Town:         "town",
	AddressCode:  "address_code",
	AddressOther: "address_other",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
}

// Generated where

var SalonWhere = struct {
	ID           whereHelperint64
	RandID       whereHelperstring
	Name         whereHelperstring
	PhoneNumber  whereHelperstring
	OpeningHours whereHelperstring
	ClosingHours whereHelperstring
	PostalCode   whereHelperstring
	Prefectures  whereHelperstring
	City         whereHelperstring
	Town         whereHelperstring
	AddressCode  whereHelperstring
	AddressOther whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
}{
	ID:           whereHelperint64{field: "`salons`.`id`"},
	RandID:       whereHelperstring{field: "`salons`.`rand_id`"},
	Name:         whereHelperstring{field: "`salons`.`name`"},
	PhoneNumber:  whereHelperstring{field: "`salons`.`phone_number`"},
	OpeningHours: whereHelperstring{field: "`salons`.`opening_hours`"},
	ClosingHours: whereHelperstring{field: "`salons`.`closing_hours`"},
	PostalCode:   whereHelperstring{field: "`salons`.`postal_code`"},
	Prefectures:  whereHelperstring{field: "`salons`.`prefectures`"},
	City:         whereHelperstring{field: "`salons`.`city`"},
	Town:         whereHelperstring{field: "`salons`.`town`"},
	AddressCode:  whereHelperstring{field: "`salons`.`address_code`"},
	AddressOther: whereHelperstring{field: "`salons`.`address_other`"},
	CreatedAt:    whereHelpertime_Time{field: "`salons`.`created_at`"},
	UpdatedAt:    whereHelpertime_Time{field: "`salons`.`updated_at`"},
	DeletedAt:    whereHelpernull_Time{field: "`salons`.`deleted_at`"},
}

// SalonRels is where relationship names are stored.
var SalonRels = struct {
	BeauticianSalons string
	Spaces           string
}{
	BeauticianSalons: "BeauticianSalons",
	Spaces:           "Spaces",
}

// salonR is where relationships are stored.
type salonR struct {
	BeauticianSalons BeauticianSalonSlice
	Spaces           SpaceSlice
}

// NewStruct creates a new relationship struct
func (*salonR) NewStruct() *salonR {
	return &salonR{}
}

// salonL is where Load methods for each relationship are stored.
type salonL struct{}

var (
	salonAllColumns            = []string{"id", "rand_id", "name", "phone_number", "opening_hours", "closing_hours", "postal_code", "prefectures", "city", "town", "address_code", "address_other", "created_at", "updated_at", "deleted_at"}
	salonColumnsWithoutDefault = []string{"rand_id", "name", "phone_number", "opening_hours", "closing_hours", "postal_code", "prefectures", "city", "town", "address_code", "address_other", "created_at", "updated_at", "deleted_at"}
	salonColumnsWithDefault    = []string{"id"}
	salonPrimaryKeyColumns     = []string{"id"}
)

type (
	// SalonSlice is an alias for a slice of pointers to Salon.
	// This should generally be used opposed to []Salon.
	SalonSlice []*Salon
	// SalonHook is the signature for custom Salon hook methods
	SalonHook func(context.Context, boil.ContextExecutor, *Salon) error

	salonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	salonType                 = reflect.TypeOf(&Salon{})
	salonMapping              = queries.MakeStructMapping(salonType)
	salonPrimaryKeyMapping, _ = queries.BindMapping(salonType, salonMapping, salonPrimaryKeyColumns)
	salonInsertCacheMut       sync.RWMutex
	salonInsertCache          = make(map[string]insertCache)
	salonUpdateCacheMut       sync.RWMutex
	salonUpdateCache          = make(map[string]updateCache)
	salonUpsertCacheMut       sync.RWMutex
	salonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var salonBeforeInsertHooks []SalonHook
var salonBeforeUpdateHooks []SalonHook
var salonBeforeDeleteHooks []SalonHook
var salonBeforeUpsertHooks []SalonHook

var salonAfterInsertHooks []SalonHook
var salonAfterSelectHooks []SalonHook
var salonAfterUpdateHooks []SalonHook
var salonAfterDeleteHooks []SalonHook
var salonAfterUpsertHooks []SalonHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Salon) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salonBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Salon) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salonBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Salon) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salonBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Salon) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salonBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Salon) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salonAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Salon) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salonAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Salon) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salonAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Salon) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salonAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Salon) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salonAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSalonHook registers your hook function for all future operations.
func AddSalonHook(hookPoint boil.HookPoint, salonHook SalonHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		salonBeforeInsertHooks = append(salonBeforeInsertHooks, salonHook)
	case boil.BeforeUpdateHook:
		salonBeforeUpdateHooks = append(salonBeforeUpdateHooks, salonHook)
	case boil.BeforeDeleteHook:
		salonBeforeDeleteHooks = append(salonBeforeDeleteHooks, salonHook)
	case boil.BeforeUpsertHook:
		salonBeforeUpsertHooks = append(salonBeforeUpsertHooks, salonHook)
	case boil.AfterInsertHook:
		salonAfterInsertHooks = append(salonAfterInsertHooks, salonHook)
	case boil.AfterSelectHook:
		salonAfterSelectHooks = append(salonAfterSelectHooks, salonHook)
	case boil.AfterUpdateHook:
		salonAfterUpdateHooks = append(salonAfterUpdateHooks, salonHook)
	case boil.AfterDeleteHook:
		salonAfterDeleteHooks = append(salonAfterDeleteHooks, salonHook)
	case boil.AfterUpsertHook:
		salonAfterUpsertHooks = append(salonAfterUpsertHooks, salonHook)
	}
}

// One returns a single salon record from the query.
func (q salonQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Salon, error) {
	o := &Salon{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for salons")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Salon records from the query.
func (q salonQuery) All(ctx context.Context, exec boil.ContextExecutor) (SalonSlice, error) {
	var o []*Salon

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to Salon slice")
	}

	if len(salonAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Salon records in the query.
func (q salonQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count salons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q salonQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if salons exists")
	}

	return count > 0, nil
}

// BeauticianSalons retrieves all the beautician_salon's BeauticianSalons with an executor.
func (o *Salon) BeauticianSalons(mods ...qm.QueryMod) beauticianSalonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`beautician_salons`.`salon_id`=?", o.ID),
	)

	query := BeauticianSalons(queryMods...)
	queries.SetFrom(query.Query, "`beautician_salons`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`beautician_salons`.*"})
	}

	return query
}

// Spaces retrieves all the space's Spaces with an executor.
func (o *Salon) Spaces(mods ...qm.QueryMod) spaceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`spaces`.`salon_id`=?", o.ID),
	)

	query := Spaces(queryMods...)
	queries.SetFrom(query.Query, "`spaces`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`spaces`.*"})
	}

	return query
}

// LoadBeauticianSalons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (salonL) LoadBeauticianSalons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSalon interface{}, mods queries.Applicator) error {
	var slice []*Salon
	var object *Salon

	if singular {
		object = maybeSalon.(*Salon)
	} else {
		slice = *maybeSalon.(*[]*Salon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &salonR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &salonR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`beautician_salons`), qm.WhereIn(`beautician_salons.salon_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load beautician_salons")
	}

	var resultSlice []*BeauticianSalon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice beautician_salons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on beautician_salons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for beautician_salons")
	}

	if len(beauticianSalonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BeauticianSalons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &beauticianSalonR{}
			}
			foreign.R.Salon = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SalonID {
				local.R.BeauticianSalons = append(local.R.BeauticianSalons, foreign)
				if foreign.R == nil {
					foreign.R = &beauticianSalonR{}
				}
				foreign.R.Salon = local
				break
			}
		}
	}

	return nil
}

// LoadSpaces allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (salonL) LoadSpaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSalon interface{}, mods queries.Applicator) error {
	var slice []*Salon
	var object *Salon

	if singular {
		object = maybeSalon.(*Salon)
	} else {
		slice = *maybeSalon.(*[]*Salon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &salonR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &salonR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`spaces`), qm.WhereIn(`spaces.salon_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load spaces")
	}

	var resultSlice []*Space
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice spaces")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on spaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for spaces")
	}

	if len(spaceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Spaces = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &spaceR{}
			}
			foreign.R.Salon = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SalonID {
				local.R.Spaces = append(local.R.Spaces, foreign)
				if foreign.R == nil {
					foreign.R = &spaceR{}
				}
				foreign.R.Salon = local
				break
			}
		}
	}

	return nil
}

// AddBeauticianSalons adds the given related objects to the existing relationships
// of the salon, optionally inserting them as new records.
// Appends related to o.R.BeauticianSalons.
// Sets related.R.Salon appropriately.
func (o *Salon) AddBeauticianSalons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BeauticianSalon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalonID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `beautician_salons` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"salon_id"}),
				strmangle.WhereClause("`", "`", 0, beauticianSalonPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.BeauticianID, rel.SalonID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &salonR{
			BeauticianSalons: related,
		}
	} else {
		o.R.BeauticianSalons = append(o.R.BeauticianSalons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &beauticianSalonR{
				Salon: o,
			}
		} else {
			rel.R.Salon = o
		}
	}
	return nil
}

// AddSpaces adds the given related objects to the existing relationships
// of the salon, optionally inserting them as new records.
// Appends related to o.R.Spaces.
// Sets related.R.Salon appropriately.
func (o *Salon) AddSpaces(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Space) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalonID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `spaces` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"salon_id"}),
				strmangle.WhereClause("`", "`", 0, spacePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &salonR{
			Spaces: related,
		}
	} else {
		o.R.Spaces = append(o.R.Spaces, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &spaceR{
				Salon: o,
			}
		} else {
			rel.R.Salon = o
		}
	}
	return nil
}

// Salons retrieves all the records using an executor.
func Salons(mods ...qm.QueryMod) salonQuery {
	mods = append(mods, qm.From("`salons`"))
	return salonQuery{NewQuery(mods...)}
}

// FindSalon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSalon(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Salon, error) {
	salonObj := &Salon{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `salons` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, salonObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from salons")
	}

	return salonObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Salon) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no salons provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(salonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	salonInsertCacheMut.RLock()
	cache, cached := salonInsertCache[key]
	salonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			salonAllColumns,
			salonColumnsWithDefault,
			salonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(salonType, salonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(salonType, salonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `salons` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `salons` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `salons` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, salonPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into salons")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == salonMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for salons")
	}

CacheNoHooks:
	if !cached {
		salonInsertCacheMut.Lock()
		salonInsertCache[key] = cache
		salonInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Salon.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Salon) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	salonUpdateCacheMut.RLock()
	cache, cached := salonUpdateCache[key]
	salonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			salonAllColumns,
			salonPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update salons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `salons` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, salonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(salonType, salonMapping, append(wl, salonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update salons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for salons")
	}

	if !cached {
		salonUpdateCacheMut.Lock()
		salonUpdateCache[key] = cache
		salonUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q salonQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for salons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for salons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SalonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `salons` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, salonPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in salon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all salon")
	}
	return rowsAff, nil
}

var mySQLSalonUniqueColumns = []string{
	"id",
	"rand_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Salon) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no salons provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(salonColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSalonUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	salonUpsertCacheMut.RLock()
	cache, cached := salonUpsertCache[key]
	salonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			salonAllColumns,
			salonColumnsWithDefault,
			salonColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			salonAllColumns,
			salonPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("entity: unable to upsert salons, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "salons", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `salons` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(salonType, salonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(salonType, salonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert for salons")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == salonMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(salonType, salonMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entity: unable to retrieve unique values for salons")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for salons")
	}

CacheNoHooks:
	if !cached {
		salonUpsertCacheMut.Lock()
		salonUpsertCache[key] = cache
		salonUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Salon record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Salon) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no Salon provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), salonPrimaryKeyMapping)
	sql := "DELETE FROM `salons` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from salons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for salons")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q salonQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no salonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from salons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for salons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SalonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(salonBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `salons` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, salonPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from salon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for salons")
	}

	if len(salonAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Salon) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSalon(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SalonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SalonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `salons`.* FROM `salons` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, salonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in SalonSlice")
	}

	*o = slice

	return nil
}

// SalonExists checks if the Salon row exists.
func SalonExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `salons` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if salons exists")
	}

	return exists, nil
}
