// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BeauticianSalon is an object representing the database table.
type BeauticianSalon struct {
	BeauticianID int64     `boil:"beautician_id" json:"beautician_id" toml:"beautician_id" yaml:"beautician_id"`
	SalonID      int64     `boil:"salon_id" json:"salon_id" toml:"salon_id" yaml:"salon_id"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *beauticianSalonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L beauticianSalonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BeauticianSalonColumns = struct {
	BeauticianID string
	SalonID      string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	BeauticianID: "beautician_id",
	SalonID:      "salon_id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BeauticianSalonWhere = struct {
	BeauticianID whereHelperint64
	SalonID      whereHelperint64
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
}{
	BeauticianID: whereHelperint64{field: "`beautician_salons`.`beautician_id`"},
	SalonID:      whereHelperint64{field: "`beautician_salons`.`salon_id`"},
	CreatedAt:    whereHelpertime_Time{field: "`beautician_salons`.`created_at`"},
	UpdatedAt:    whereHelpertime_Time{field: "`beautician_salons`.`updated_at`"},
	DeletedAt:    whereHelpernull_Time{field: "`beautician_salons`.`deleted_at`"},
}

// BeauticianSalonRels is where relationship names are stored.
var BeauticianSalonRels = struct {
}{}

// beauticianSalonR is where relationships are stored.
type beauticianSalonR struct {
}

// NewStruct creates a new relationship struct
func (*beauticianSalonR) NewStruct() *beauticianSalonR {
	return &beauticianSalonR{}
}

// beauticianSalonL is where Load methods for each relationship are stored.
type beauticianSalonL struct{}

var (
	beauticianSalonAllColumns            = []string{"beautician_id", "salon_id", "created_at", "updated_at", "deleted_at"}
	beauticianSalonColumnsWithoutDefault = []string{"beautician_id", "salon_id", "created_at", "updated_at", "deleted_at"}
	beauticianSalonColumnsWithDefault    = []string{}
	beauticianSalonPrimaryKeyColumns     = []string{"beautician_id", "salon_id"}
)

type (
	// BeauticianSalonSlice is an alias for a slice of pointers to BeauticianSalon.
	// This should generally be used opposed to []BeauticianSalon.
	BeauticianSalonSlice []*BeauticianSalon
	// BeauticianSalonHook is the signature for custom BeauticianSalon hook methods
	BeauticianSalonHook func(context.Context, boil.ContextExecutor, *BeauticianSalon) error

	beauticianSalonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	beauticianSalonType                 = reflect.TypeOf(&BeauticianSalon{})
	beauticianSalonMapping              = queries.MakeStructMapping(beauticianSalonType)
	beauticianSalonPrimaryKeyMapping, _ = queries.BindMapping(beauticianSalonType, beauticianSalonMapping, beauticianSalonPrimaryKeyColumns)
	beauticianSalonInsertCacheMut       sync.RWMutex
	beauticianSalonInsertCache          = make(map[string]insertCache)
	beauticianSalonUpdateCacheMut       sync.RWMutex
	beauticianSalonUpdateCache          = make(map[string]updateCache)
	beauticianSalonUpsertCacheMut       sync.RWMutex
	beauticianSalonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var beauticianSalonBeforeInsertHooks []BeauticianSalonHook
var beauticianSalonBeforeUpdateHooks []BeauticianSalonHook
var beauticianSalonBeforeDeleteHooks []BeauticianSalonHook
var beauticianSalonBeforeUpsertHooks []BeauticianSalonHook

var beauticianSalonAfterInsertHooks []BeauticianSalonHook
var beauticianSalonAfterSelectHooks []BeauticianSalonHook
var beauticianSalonAfterUpdateHooks []BeauticianSalonHook
var beauticianSalonAfterDeleteHooks []BeauticianSalonHook
var beauticianSalonAfterUpsertHooks []BeauticianSalonHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BeauticianSalon) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianSalonBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BeauticianSalon) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianSalonBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BeauticianSalon) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianSalonBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BeauticianSalon) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianSalonBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BeauticianSalon) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianSalonAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BeauticianSalon) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianSalonAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BeauticianSalon) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianSalonAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BeauticianSalon) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianSalonAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BeauticianSalon) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianSalonAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBeauticianSalonHook registers your hook function for all future operations.
func AddBeauticianSalonHook(hookPoint boil.HookPoint, beauticianSalonHook BeauticianSalonHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		beauticianSalonBeforeInsertHooks = append(beauticianSalonBeforeInsertHooks, beauticianSalonHook)
	case boil.BeforeUpdateHook:
		beauticianSalonBeforeUpdateHooks = append(beauticianSalonBeforeUpdateHooks, beauticianSalonHook)
	case boil.BeforeDeleteHook:
		beauticianSalonBeforeDeleteHooks = append(beauticianSalonBeforeDeleteHooks, beauticianSalonHook)
	case boil.BeforeUpsertHook:
		beauticianSalonBeforeUpsertHooks = append(beauticianSalonBeforeUpsertHooks, beauticianSalonHook)
	case boil.AfterInsertHook:
		beauticianSalonAfterInsertHooks = append(beauticianSalonAfterInsertHooks, beauticianSalonHook)
	case boil.AfterSelectHook:
		beauticianSalonAfterSelectHooks = append(beauticianSalonAfterSelectHooks, beauticianSalonHook)
	case boil.AfterUpdateHook:
		beauticianSalonAfterUpdateHooks = append(beauticianSalonAfterUpdateHooks, beauticianSalonHook)
	case boil.AfterDeleteHook:
		beauticianSalonAfterDeleteHooks = append(beauticianSalonAfterDeleteHooks, beauticianSalonHook)
	case boil.AfterUpsertHook:
		beauticianSalonAfterUpsertHooks = append(beauticianSalonAfterUpsertHooks, beauticianSalonHook)
	}
}

// One returns a single beauticianSalon record from the query.
func (q beauticianSalonQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BeauticianSalon, error) {
	o := &BeauticianSalon{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for beautician_salons")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BeauticianSalon records from the query.
func (q beauticianSalonQuery) All(ctx context.Context, exec boil.ContextExecutor) (BeauticianSalonSlice, error) {
	var o []*BeauticianSalon

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to BeauticianSalon slice")
	}

	if len(beauticianSalonAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BeauticianSalon records in the query.
func (q beauticianSalonQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count beautician_salons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q beauticianSalonQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if beautician_salons exists")
	}

	return count > 0, nil
}

// BeauticianSalons retrieves all the records using an executor.
func BeauticianSalons(mods ...qm.QueryMod) beauticianSalonQuery {
	mods = append(mods, qm.From("`beautician_salons`"))
	return beauticianSalonQuery{NewQuery(mods...)}
}

// FindBeauticianSalon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBeauticianSalon(ctx context.Context, exec boil.ContextExecutor, beauticianID int64, salonID int64, selectCols ...string) (*BeauticianSalon, error) {
	beauticianSalonObj := &BeauticianSalon{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `beautician_salons` where `beautician_id`=? AND `salon_id`=?", sel,
	)

	q := queries.Raw(query, beauticianID, salonID)

	err := q.Bind(ctx, exec, beauticianSalonObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from beautician_salons")
	}

	return beauticianSalonObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BeauticianSalon) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no beautician_salons provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(beauticianSalonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	beauticianSalonInsertCacheMut.RLock()
	cache, cached := beauticianSalonInsertCache[key]
	beauticianSalonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			beauticianSalonAllColumns,
			beauticianSalonColumnsWithDefault,
			beauticianSalonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(beauticianSalonType, beauticianSalonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(beauticianSalonType, beauticianSalonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `beautician_salons` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `beautician_salons` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `beautician_salons` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, beauticianSalonPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into beautician_salons")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BeauticianID,
		o.SalonID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for beautician_salons")
	}

CacheNoHooks:
	if !cached {
		beauticianSalonInsertCacheMut.Lock()
		beauticianSalonInsertCache[key] = cache
		beauticianSalonInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BeauticianSalon.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BeauticianSalon) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	beauticianSalonUpdateCacheMut.RLock()
	cache, cached := beauticianSalonUpdateCache[key]
	beauticianSalonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			beauticianSalonAllColumns,
			beauticianSalonPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update beautician_salons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `beautician_salons` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, beauticianSalonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(beauticianSalonType, beauticianSalonMapping, append(wl, beauticianSalonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update beautician_salons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for beautician_salons")
	}

	if !cached {
		beauticianSalonUpdateCacheMut.Lock()
		beauticianSalonUpdateCache[key] = cache
		beauticianSalonUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q beauticianSalonQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for beautician_salons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for beautician_salons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BeauticianSalonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), beauticianSalonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `beautician_salons` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, beauticianSalonPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in beauticianSalon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all beauticianSalon")
	}
	return rowsAff, nil
}

var mySQLBeauticianSalonUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BeauticianSalon) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no beautician_salons provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(beauticianSalonColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBeauticianSalonUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	beauticianSalonUpsertCacheMut.RLock()
	cache, cached := beauticianSalonUpsertCache[key]
	beauticianSalonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			beauticianSalonAllColumns,
			beauticianSalonColumnsWithDefault,
			beauticianSalonColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			beauticianSalonAllColumns,
			beauticianSalonPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("entity: unable to upsert beautician_salons, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "beautician_salons", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `beautician_salons` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(beauticianSalonType, beauticianSalonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(beauticianSalonType, beauticianSalonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert for beautician_salons")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(beauticianSalonType, beauticianSalonMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entity: unable to retrieve unique values for beautician_salons")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for beautician_salons")
	}

CacheNoHooks:
	if !cached {
		beauticianSalonUpsertCacheMut.Lock()
		beauticianSalonUpsertCache[key] = cache
		beauticianSalonUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BeauticianSalon record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BeauticianSalon) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no BeauticianSalon provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), beauticianSalonPrimaryKeyMapping)
	sql := "DELETE FROM `beautician_salons` WHERE `beautician_id`=? AND `salon_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from beautician_salons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for beautician_salons")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q beauticianSalonQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no beauticianSalonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from beautician_salons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for beautician_salons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BeauticianSalonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(beauticianSalonBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), beauticianSalonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `beautician_salons` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, beauticianSalonPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from beauticianSalon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for beautician_salons")
	}

	if len(beauticianSalonAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BeauticianSalon) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBeauticianSalon(ctx, exec, o.BeauticianID, o.SalonID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BeauticianSalonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BeauticianSalonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), beauticianSalonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `beautician_salons`.* FROM `beautician_salons` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, beauticianSalonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in BeauticianSalonSlice")
	}

	*o = slice

	return nil
}

// BeauticianSalonExists checks if the BeauticianSalon row exists.
func BeauticianSalonExists(ctx context.Context, exec boil.ContextExecutor, beauticianID int64, salonID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `beautician_salons` where `beautician_id`=? AND `salon_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, beauticianID, salonID)
	}
	row := exec.QueryRowContext(ctx, sql, beauticianID, salonID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if beautician_salons exists")
	}

	return exists, nil
}
