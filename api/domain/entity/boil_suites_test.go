// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("BeauticianMenus", testBeauticianMenus)
	t.Run("BeauticianSalons", testBeauticianSalons)
	t.Run("Beauticians", testBeauticians)
	t.Run("Guests", testGuests)
	t.Run("Menus", testMenus)
	t.Run("Reservations", testReservations)
	t.Run("Salons", testSalons)
	t.Run("Spaces", testSpaces)
}

func TestDelete(t *testing.T) {
	t.Run("BeauticianMenus", testBeauticianMenusDelete)
	t.Run("BeauticianSalons", testBeauticianSalonsDelete)
	t.Run("Beauticians", testBeauticiansDelete)
	t.Run("Guests", testGuestsDelete)
	t.Run("Menus", testMenusDelete)
	t.Run("Reservations", testReservationsDelete)
	t.Run("Salons", testSalonsDelete)
	t.Run("Spaces", testSpacesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("BeauticianMenus", testBeauticianMenusQueryDeleteAll)
	t.Run("BeauticianSalons", testBeauticianSalonsQueryDeleteAll)
	t.Run("Beauticians", testBeauticiansQueryDeleteAll)
	t.Run("Guests", testGuestsQueryDeleteAll)
	t.Run("Menus", testMenusQueryDeleteAll)
	t.Run("Reservations", testReservationsQueryDeleteAll)
	t.Run("Salons", testSalonsQueryDeleteAll)
	t.Run("Spaces", testSpacesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("BeauticianMenus", testBeauticianMenusSliceDeleteAll)
	t.Run("BeauticianSalons", testBeauticianSalonsSliceDeleteAll)
	t.Run("Beauticians", testBeauticiansSliceDeleteAll)
	t.Run("Guests", testGuestsSliceDeleteAll)
	t.Run("Menus", testMenusSliceDeleteAll)
	t.Run("Reservations", testReservationsSliceDeleteAll)
	t.Run("Salons", testSalonsSliceDeleteAll)
	t.Run("Spaces", testSpacesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("BeauticianMenus", testBeauticianMenusExists)
	t.Run("BeauticianSalons", testBeauticianSalonsExists)
	t.Run("Beauticians", testBeauticiansExists)
	t.Run("Guests", testGuestsExists)
	t.Run("Menus", testMenusExists)
	t.Run("Reservations", testReservationsExists)
	t.Run("Salons", testSalonsExists)
	t.Run("Spaces", testSpacesExists)
}

func TestFind(t *testing.T) {
	t.Run("BeauticianMenus", testBeauticianMenusFind)
	t.Run("BeauticianSalons", testBeauticianSalonsFind)
	t.Run("Beauticians", testBeauticiansFind)
	t.Run("Guests", testGuestsFind)
	t.Run("Menus", testMenusFind)
	t.Run("Reservations", testReservationsFind)
	t.Run("Salons", testSalonsFind)
	t.Run("Spaces", testSpacesFind)
}

func TestBind(t *testing.T) {
	t.Run("BeauticianMenus", testBeauticianMenusBind)
	t.Run("BeauticianSalons", testBeauticianSalonsBind)
	t.Run("Beauticians", testBeauticiansBind)
	t.Run("Guests", testGuestsBind)
	t.Run("Menus", testMenusBind)
	t.Run("Reservations", testReservationsBind)
	t.Run("Salons", testSalonsBind)
	t.Run("Spaces", testSpacesBind)
}

func TestOne(t *testing.T) {
	t.Run("BeauticianMenus", testBeauticianMenusOne)
	t.Run("BeauticianSalons", testBeauticianSalonsOne)
	t.Run("Beauticians", testBeauticiansOne)
	t.Run("Guests", testGuestsOne)
	t.Run("Menus", testMenusOne)
	t.Run("Reservations", testReservationsOne)
	t.Run("Salons", testSalonsOne)
	t.Run("Spaces", testSpacesOne)
}

func TestAll(t *testing.T) {
	t.Run("BeauticianMenus", testBeauticianMenusAll)
	t.Run("BeauticianSalons", testBeauticianSalonsAll)
	t.Run("Beauticians", testBeauticiansAll)
	t.Run("Guests", testGuestsAll)
	t.Run("Menus", testMenusAll)
	t.Run("Reservations", testReservationsAll)
	t.Run("Salons", testSalonsAll)
	t.Run("Spaces", testSpacesAll)
}

func TestCount(t *testing.T) {
	t.Run("BeauticianMenus", testBeauticianMenusCount)
	t.Run("BeauticianSalons", testBeauticianSalonsCount)
	t.Run("Beauticians", testBeauticiansCount)
	t.Run("Guests", testGuestsCount)
	t.Run("Menus", testMenusCount)
	t.Run("Reservations", testReservationsCount)
	t.Run("Salons", testSalonsCount)
	t.Run("Spaces", testSpacesCount)
}

func TestHooks(t *testing.T) {
	t.Run("BeauticianMenus", testBeauticianMenusHooks)
	t.Run("BeauticianSalons", testBeauticianSalonsHooks)
	t.Run("Beauticians", testBeauticiansHooks)
	t.Run("Guests", testGuestsHooks)
	t.Run("Menus", testMenusHooks)
	t.Run("Reservations", testReservationsHooks)
	t.Run("Salons", testSalonsHooks)
	t.Run("Spaces", testSpacesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("BeauticianMenus", testBeauticianMenusInsert)
	t.Run("BeauticianMenus", testBeauticianMenusInsertWhitelist)
	t.Run("BeauticianSalons", testBeauticianSalonsInsert)
	t.Run("BeauticianSalons", testBeauticianSalonsInsertWhitelist)
	t.Run("Beauticians", testBeauticiansInsert)
	t.Run("Beauticians", testBeauticiansInsertWhitelist)
	t.Run("Guests", testGuestsInsert)
	t.Run("Guests", testGuestsInsertWhitelist)
	t.Run("Menus", testMenusInsert)
	t.Run("Menus", testMenusInsertWhitelist)
	t.Run("Reservations", testReservationsInsert)
	t.Run("Reservations", testReservationsInsertWhitelist)
	t.Run("Salons", testSalonsInsert)
	t.Run("Salons", testSalonsInsertWhitelist)
	t.Run("Spaces", testSpacesInsert)
	t.Run("Spaces", testSpacesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BeauticianMenuToBeauticianUsingBeautician", testBeauticianMenuToOneBeauticianUsingBeautician)
	t.Run("BeauticianMenuToMenuUsingMenu", testBeauticianMenuToOneMenuUsingMenu)
	t.Run("ReservationToBeauticianUsingBeautician", testReservationToOneBeauticianUsingBeautician)
	t.Run("ReservationToGuestUsingGuest", testReservationToOneGuestUsingGuest)
	t.Run("ReservationToMenuUsingMenu", testReservationToOneMenuUsingMenu)
	t.Run("ReservationToSpaceUsingSpace", testReservationToOneSpaceUsingSpace)
	t.Run("SpaceToSalonUsingSalon", testSpaceToOneSalonUsingSalon)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("BeauticianToBeauticianMenus", testBeauticianToManyBeauticianMenus)
	t.Run("BeauticianToReservations", testBeauticianToManyReservations)
	t.Run("GuestToReservations", testGuestToManyReservations)
	t.Run("MenuToBeauticianMenus", testMenuToManyBeauticianMenus)
	t.Run("MenuToReservations", testMenuToManyReservations)
	t.Run("SalonToSpaces", testSalonToManySpaces)
	t.Run("SpaceToReservations", testSpaceToManyReservations)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BeauticianMenuToBeauticianUsingBeauticianMenus", testBeauticianMenuToOneSetOpBeauticianUsingBeautician)
	t.Run("BeauticianMenuToMenuUsingBeauticianMenus", testBeauticianMenuToOneSetOpMenuUsingMenu)
	t.Run("ReservationToBeauticianUsingReservations", testReservationToOneSetOpBeauticianUsingBeautician)
	t.Run("ReservationToGuestUsingReservations", testReservationToOneSetOpGuestUsingGuest)
	t.Run("ReservationToMenuUsingReservations", testReservationToOneSetOpMenuUsingMenu)
	t.Run("ReservationToSpaceUsingReservations", testReservationToOneSetOpSpaceUsingSpace)
	t.Run("SpaceToSalonUsingSpaces", testSpaceToOneSetOpSalonUsingSalon)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("BeauticianToBeauticianMenus", testBeauticianToManyAddOpBeauticianMenus)
	t.Run("BeauticianToReservations", testBeauticianToManyAddOpReservations)
	t.Run("GuestToReservations", testGuestToManyAddOpReservations)
	t.Run("MenuToBeauticianMenus", testMenuToManyAddOpBeauticianMenus)
	t.Run("MenuToReservations", testMenuToManyAddOpReservations)
	t.Run("SalonToSpaces", testSalonToManyAddOpSpaces)
	t.Run("SpaceToReservations", testSpaceToManyAddOpReservations)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("BeauticianMenus", testBeauticianMenusReload)
	t.Run("BeauticianSalons", testBeauticianSalonsReload)
	t.Run("Beauticians", testBeauticiansReload)
	t.Run("Guests", testGuestsReload)
	t.Run("Menus", testMenusReload)
	t.Run("Reservations", testReservationsReload)
	t.Run("Salons", testSalonsReload)
	t.Run("Spaces", testSpacesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("BeauticianMenus", testBeauticianMenusReloadAll)
	t.Run("BeauticianSalons", testBeauticianSalonsReloadAll)
	t.Run("Beauticians", testBeauticiansReloadAll)
	t.Run("Guests", testGuestsReloadAll)
	t.Run("Menus", testMenusReloadAll)
	t.Run("Reservations", testReservationsReloadAll)
	t.Run("Salons", testSalonsReloadAll)
	t.Run("Spaces", testSpacesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("BeauticianMenus", testBeauticianMenusSelect)
	t.Run("BeauticianSalons", testBeauticianSalonsSelect)
	t.Run("Beauticians", testBeauticiansSelect)
	t.Run("Guests", testGuestsSelect)
	t.Run("Menus", testMenusSelect)
	t.Run("Reservations", testReservationsSelect)
	t.Run("Salons", testSalonsSelect)
	t.Run("Spaces", testSpacesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("BeauticianMenus", testBeauticianMenusUpdate)
	t.Run("BeauticianSalons", testBeauticianSalonsUpdate)
	t.Run("Beauticians", testBeauticiansUpdate)
	t.Run("Guests", testGuestsUpdate)
	t.Run("Menus", testMenusUpdate)
	t.Run("Reservations", testReservationsUpdate)
	t.Run("Salons", testSalonsUpdate)
	t.Run("Spaces", testSpacesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("BeauticianMenus", testBeauticianMenusSliceUpdateAll)
	t.Run("BeauticianSalons", testBeauticianSalonsSliceUpdateAll)
	t.Run("Beauticians", testBeauticiansSliceUpdateAll)
	t.Run("Guests", testGuestsSliceUpdateAll)
	t.Run("Menus", testMenusSliceUpdateAll)
	t.Run("Reservations", testReservationsSliceUpdateAll)
	t.Run("Salons", testSalonsSliceUpdateAll)
	t.Run("Spaces", testSpacesSliceUpdateAll)
}
