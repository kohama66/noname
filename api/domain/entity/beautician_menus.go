// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BeauticianMenu is an object representing the database table.
type BeauticianMenu struct {
	Price        int64     `boil:"price" json:"price" toml:"price" yaml:"price"`
	BeauticianID int64     `boil:"beautician_id" json:"beautician_id" toml:"beautician_id" yaml:"beautician_id"`
	MenuID       int64     `boil:"menu_id" json:"menu_id" toml:"menu_id" yaml:"menu_id"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *beauticianMenuR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L beauticianMenuL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BeauticianMenuColumns = struct {
	Price        string
	BeauticianID string
	MenuID       string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	Price:        "price",
	BeauticianID: "beautician_id",
	MenuID:       "menu_id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var BeauticianMenuWhere = struct {
	Price        whereHelperint64
	BeauticianID whereHelperint64
	MenuID       whereHelperint64
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
}{
	Price:        whereHelperint64{field: "`beautician_menus`.`price`"},
	BeauticianID: whereHelperint64{field: "`beautician_menus`.`beautician_id`"},
	MenuID:       whereHelperint64{field: "`beautician_menus`.`menu_id`"},
	CreatedAt:    whereHelpertime_Time{field: "`beautician_menus`.`created_at`"},
	UpdatedAt:    whereHelpertime_Time{field: "`beautician_menus`.`updated_at`"},
	DeletedAt:    whereHelpernull_Time{field: "`beautician_menus`.`deleted_at`"},
}

// BeauticianMenuRels is where relationship names are stored.
var BeauticianMenuRels = struct {
	Beautician string
	Menu       string
}{
	Beautician: "Beautician",
	Menu:       "Menu",
}

// beauticianMenuR is where relationships are stored.
type beauticianMenuR struct {
	Beautician *Beautician
	Menu       *Menu
}

// NewStruct creates a new relationship struct
func (*beauticianMenuR) NewStruct() *beauticianMenuR {
	return &beauticianMenuR{}
}

// beauticianMenuL is where Load methods for each relationship are stored.
type beauticianMenuL struct{}

var (
	beauticianMenuAllColumns            = []string{"price", "beautician_id", "menu_id", "created_at", "updated_at", "deleted_at"}
	beauticianMenuColumnsWithoutDefault = []string{"price", "beautician_id", "menu_id", "created_at", "updated_at", "deleted_at"}
	beauticianMenuColumnsWithDefault    = []string{}
	beauticianMenuPrimaryKeyColumns     = []string{"beautician_id", "menu_id"}
)

type (
	// BeauticianMenuSlice is an alias for a slice of pointers to BeauticianMenu.
	// This should generally be used opposed to []BeauticianMenu.
	BeauticianMenuSlice []*BeauticianMenu
	// BeauticianMenuHook is the signature for custom BeauticianMenu hook methods
	BeauticianMenuHook func(context.Context, boil.ContextExecutor, *BeauticianMenu) error

	beauticianMenuQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	beauticianMenuType                 = reflect.TypeOf(&BeauticianMenu{})
	beauticianMenuMapping              = queries.MakeStructMapping(beauticianMenuType)
	beauticianMenuPrimaryKeyMapping, _ = queries.BindMapping(beauticianMenuType, beauticianMenuMapping, beauticianMenuPrimaryKeyColumns)
	beauticianMenuInsertCacheMut       sync.RWMutex
	beauticianMenuInsertCache          = make(map[string]insertCache)
	beauticianMenuUpdateCacheMut       sync.RWMutex
	beauticianMenuUpdateCache          = make(map[string]updateCache)
	beauticianMenuUpsertCacheMut       sync.RWMutex
	beauticianMenuUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var beauticianMenuBeforeInsertHooks []BeauticianMenuHook
var beauticianMenuBeforeUpdateHooks []BeauticianMenuHook
var beauticianMenuBeforeDeleteHooks []BeauticianMenuHook
var beauticianMenuBeforeUpsertHooks []BeauticianMenuHook

var beauticianMenuAfterInsertHooks []BeauticianMenuHook
var beauticianMenuAfterSelectHooks []BeauticianMenuHook
var beauticianMenuAfterUpdateHooks []BeauticianMenuHook
var beauticianMenuAfterDeleteHooks []BeauticianMenuHook
var beauticianMenuAfterUpsertHooks []BeauticianMenuHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BeauticianMenu) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianMenuBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BeauticianMenu) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianMenuBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BeauticianMenu) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianMenuBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BeauticianMenu) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianMenuBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BeauticianMenu) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianMenuAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BeauticianMenu) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianMenuAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BeauticianMenu) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianMenuAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BeauticianMenu) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianMenuAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BeauticianMenu) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range beauticianMenuAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBeauticianMenuHook registers your hook function for all future operations.
func AddBeauticianMenuHook(hookPoint boil.HookPoint, beauticianMenuHook BeauticianMenuHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		beauticianMenuBeforeInsertHooks = append(beauticianMenuBeforeInsertHooks, beauticianMenuHook)
	case boil.BeforeUpdateHook:
		beauticianMenuBeforeUpdateHooks = append(beauticianMenuBeforeUpdateHooks, beauticianMenuHook)
	case boil.BeforeDeleteHook:
		beauticianMenuBeforeDeleteHooks = append(beauticianMenuBeforeDeleteHooks, beauticianMenuHook)
	case boil.BeforeUpsertHook:
		beauticianMenuBeforeUpsertHooks = append(beauticianMenuBeforeUpsertHooks, beauticianMenuHook)
	case boil.AfterInsertHook:
		beauticianMenuAfterInsertHooks = append(beauticianMenuAfterInsertHooks, beauticianMenuHook)
	case boil.AfterSelectHook:
		beauticianMenuAfterSelectHooks = append(beauticianMenuAfterSelectHooks, beauticianMenuHook)
	case boil.AfterUpdateHook:
		beauticianMenuAfterUpdateHooks = append(beauticianMenuAfterUpdateHooks, beauticianMenuHook)
	case boil.AfterDeleteHook:
		beauticianMenuAfterDeleteHooks = append(beauticianMenuAfterDeleteHooks, beauticianMenuHook)
	case boil.AfterUpsertHook:
		beauticianMenuAfterUpsertHooks = append(beauticianMenuAfterUpsertHooks, beauticianMenuHook)
	}
}

// One returns a single beauticianMenu record from the query.
func (q beauticianMenuQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BeauticianMenu, error) {
	o := &BeauticianMenu{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for beautician_menus")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BeauticianMenu records from the query.
func (q beauticianMenuQuery) All(ctx context.Context, exec boil.ContextExecutor) (BeauticianMenuSlice, error) {
	var o []*BeauticianMenu

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to BeauticianMenu slice")
	}

	if len(beauticianMenuAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BeauticianMenu records in the query.
func (q beauticianMenuQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count beautician_menus rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q beauticianMenuQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if beautician_menus exists")
	}

	return count > 0, nil
}

// Beautician pointed to by the foreign key.
func (o *BeauticianMenu) Beautician(mods ...qm.QueryMod) beauticianQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.BeauticianID),
	}

	queryMods = append(queryMods, mods...)

	query := Beauticians(queryMods...)
	queries.SetFrom(query.Query, "`beauticians`")

	return query
}

// Menu pointed to by the foreign key.
func (o *BeauticianMenu) Menu(mods ...qm.QueryMod) menuQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.MenuID),
	}

	queryMods = append(queryMods, mods...)

	query := Menus(queryMods...)
	queries.SetFrom(query.Query, "`menus`")

	return query
}

// LoadBeautician allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (beauticianMenuL) LoadBeautician(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBeauticianMenu interface{}, mods queries.Applicator) error {
	var slice []*BeauticianMenu
	var object *BeauticianMenu

	if singular {
		object = maybeBeauticianMenu.(*BeauticianMenu)
	} else {
		slice = *maybeBeauticianMenu.(*[]*BeauticianMenu)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &beauticianMenuR{}
		}
		args = append(args, object.BeauticianID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &beauticianMenuR{}
			}

			for _, a := range args {
				if a == obj.BeauticianID {
					continue Outer
				}
			}

			args = append(args, obj.BeauticianID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`beauticians`), qm.WhereIn(`beauticians.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Beautician")
	}

	var resultSlice []*Beautician
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Beautician")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for beauticians")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for beauticians")
	}

	if len(beauticianMenuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Beautician = foreign
		if foreign.R == nil {
			foreign.R = &beauticianR{}
		}
		foreign.R.BeauticianMenus = append(foreign.R.BeauticianMenus, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BeauticianID == foreign.ID {
				local.R.Beautician = foreign
				if foreign.R == nil {
					foreign.R = &beauticianR{}
				}
				foreign.R.BeauticianMenus = append(foreign.R.BeauticianMenus, local)
				break
			}
		}
	}

	return nil
}

// LoadMenu allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (beauticianMenuL) LoadMenu(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBeauticianMenu interface{}, mods queries.Applicator) error {
	var slice []*BeauticianMenu
	var object *BeauticianMenu

	if singular {
		object = maybeBeauticianMenu.(*BeauticianMenu)
	} else {
		slice = *maybeBeauticianMenu.(*[]*BeauticianMenu)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &beauticianMenuR{}
		}
		args = append(args, object.MenuID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &beauticianMenuR{}
			}

			for _, a := range args {
				if a == obj.MenuID {
					continue Outer
				}
			}

			args = append(args, obj.MenuID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`menus`), qm.WhereIn(`menus.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Menu")
	}

	var resultSlice []*Menu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Menu")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for menus")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menus")
	}

	if len(beauticianMenuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Menu = foreign
		if foreign.R == nil {
			foreign.R = &menuR{}
		}
		foreign.R.BeauticianMenus = append(foreign.R.BeauticianMenus, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MenuID == foreign.ID {
				local.R.Menu = foreign
				if foreign.R == nil {
					foreign.R = &menuR{}
				}
				foreign.R.BeauticianMenus = append(foreign.R.BeauticianMenus, local)
				break
			}
		}
	}

	return nil
}

// SetBeautician of the beauticianMenu to the related item.
// Sets o.R.Beautician to related.
// Adds o to related.R.BeauticianMenus.
func (o *BeauticianMenu) SetBeautician(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Beautician) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `beautician_menus` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"beautician_id"}),
		strmangle.WhereClause("`", "`", 0, beauticianMenuPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BeauticianID, o.MenuID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BeauticianID = related.ID
	if o.R == nil {
		o.R = &beauticianMenuR{
			Beautician: related,
		}
	} else {
		o.R.Beautician = related
	}

	if related.R == nil {
		related.R = &beauticianR{
			BeauticianMenus: BeauticianMenuSlice{o},
		}
	} else {
		related.R.BeauticianMenus = append(related.R.BeauticianMenus, o)
	}

	return nil
}

// SetMenu of the beauticianMenu to the related item.
// Sets o.R.Menu to related.
// Adds o to related.R.BeauticianMenus.
func (o *BeauticianMenu) SetMenu(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Menu) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `beautician_menus` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"menu_id"}),
		strmangle.WhereClause("`", "`", 0, beauticianMenuPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.BeauticianID, o.MenuID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MenuID = related.ID
	if o.R == nil {
		o.R = &beauticianMenuR{
			Menu: related,
		}
	} else {
		o.R.Menu = related
	}

	if related.R == nil {
		related.R = &menuR{
			BeauticianMenus: BeauticianMenuSlice{o},
		}
	} else {
		related.R.BeauticianMenus = append(related.R.BeauticianMenus, o)
	}

	return nil
}

// BeauticianMenus retrieves all the records using an executor.
func BeauticianMenus(mods ...qm.QueryMod) beauticianMenuQuery {
	mods = append(mods, qm.From("`beautician_menus`"))
	return beauticianMenuQuery{NewQuery(mods...)}
}

// FindBeauticianMenu retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBeauticianMenu(ctx context.Context, exec boil.ContextExecutor, beauticianID int64, menuID int64, selectCols ...string) (*BeauticianMenu, error) {
	beauticianMenuObj := &BeauticianMenu{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `beautician_menus` where `beautician_id`=? AND `menu_id`=?", sel,
	)

	q := queries.Raw(query, beauticianID, menuID)

	err := q.Bind(ctx, exec, beauticianMenuObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from beautician_menus")
	}

	return beauticianMenuObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BeauticianMenu) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no beautician_menus provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(beauticianMenuColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	beauticianMenuInsertCacheMut.RLock()
	cache, cached := beauticianMenuInsertCache[key]
	beauticianMenuInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			beauticianMenuAllColumns,
			beauticianMenuColumnsWithDefault,
			beauticianMenuColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(beauticianMenuType, beauticianMenuMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(beauticianMenuType, beauticianMenuMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `beautician_menus` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `beautician_menus` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `beautician_menus` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, beauticianMenuPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into beautician_menus")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BeauticianID,
		o.MenuID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for beautician_menus")
	}

CacheNoHooks:
	if !cached {
		beauticianMenuInsertCacheMut.Lock()
		beauticianMenuInsertCache[key] = cache
		beauticianMenuInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BeauticianMenu.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BeauticianMenu) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	beauticianMenuUpdateCacheMut.RLock()
	cache, cached := beauticianMenuUpdateCache[key]
	beauticianMenuUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			beauticianMenuAllColumns,
			beauticianMenuPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update beautician_menus, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `beautician_menus` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, beauticianMenuPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(beauticianMenuType, beauticianMenuMapping, append(wl, beauticianMenuPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update beautician_menus row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for beautician_menus")
	}

	if !cached {
		beauticianMenuUpdateCacheMut.Lock()
		beauticianMenuUpdateCache[key] = cache
		beauticianMenuUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q beauticianMenuQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for beautician_menus")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for beautician_menus")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BeauticianMenuSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), beauticianMenuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `beautician_menus` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, beauticianMenuPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in beauticianMenu slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all beauticianMenu")
	}
	return rowsAff, nil
}

var mySQLBeauticianMenuUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BeauticianMenu) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no beautician_menus provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(beauticianMenuColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBeauticianMenuUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	beauticianMenuUpsertCacheMut.RLock()
	cache, cached := beauticianMenuUpsertCache[key]
	beauticianMenuUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			beauticianMenuAllColumns,
			beauticianMenuColumnsWithDefault,
			beauticianMenuColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			beauticianMenuAllColumns,
			beauticianMenuPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("entity: unable to upsert beautician_menus, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "beautician_menus", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `beautician_menus` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(beauticianMenuType, beauticianMenuMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(beauticianMenuType, beauticianMenuMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert for beautician_menus")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(beauticianMenuType, beauticianMenuMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entity: unable to retrieve unique values for beautician_menus")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entity: unable to populate default values for beautician_menus")
	}

CacheNoHooks:
	if !cached {
		beauticianMenuUpsertCacheMut.Lock()
		beauticianMenuUpsertCache[key] = cache
		beauticianMenuUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BeauticianMenu record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BeauticianMenu) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no BeauticianMenu provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), beauticianMenuPrimaryKeyMapping)
	sql := "DELETE FROM `beautician_menus` WHERE `beautician_id`=? AND `menu_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from beautician_menus")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for beautician_menus")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q beauticianMenuQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no beauticianMenuQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from beautician_menus")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for beautician_menus")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BeauticianMenuSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(beauticianMenuBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), beauticianMenuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `beautician_menus` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, beauticianMenuPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from beauticianMenu slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for beautician_menus")
	}

	if len(beauticianMenuAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BeauticianMenu) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBeauticianMenu(ctx, exec, o.BeauticianID, o.MenuID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BeauticianMenuSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BeauticianMenuSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), beauticianMenuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `beautician_menus`.* FROM `beautician_menus` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, beauticianMenuPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in BeauticianMenuSlice")
	}

	*o = slice

	return nil
}

// BeauticianMenuExists checks if the BeauticianMenu row exists.
func BeauticianMenuExists(ctx context.Context, exec boil.ContextExecutor, beauticianID int64, menuID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `beautician_menus` where `beautician_id`=? AND `menu_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, beauticianID, menuID)
	}
	row := exec.QueryRowContext(ctx, sql, beauticianID, menuID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if beautician_menus exists")
	}

	return exists, nil
}
