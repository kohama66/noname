// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBeauticianSalons(t *testing.T) {
	t.Parallel()

	query := BeauticianSalons()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBeauticianSalonsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BeauticianSalon{}
	if err = randomize.Struct(seed, o, beauticianSalonDBTypes, true, beauticianSalonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BeauticianSalons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBeauticianSalonsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BeauticianSalon{}
	if err = randomize.Struct(seed, o, beauticianSalonDBTypes, true, beauticianSalonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BeauticianSalons().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BeauticianSalons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBeauticianSalonsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BeauticianSalon{}
	if err = randomize.Struct(seed, o, beauticianSalonDBTypes, true, beauticianSalonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BeauticianSalonSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BeauticianSalons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBeauticianSalonsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BeauticianSalon{}
	if err = randomize.Struct(seed, o, beauticianSalonDBTypes, true, beauticianSalonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BeauticianSalonExists(ctx, tx, o.BeauticianID, o.SalonID)
	if err != nil {
		t.Errorf("Unable to check if BeauticianSalon exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BeauticianSalonExists to return true, but got false.")
	}
}

func testBeauticianSalonsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BeauticianSalon{}
	if err = randomize.Struct(seed, o, beauticianSalonDBTypes, true, beauticianSalonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	beauticianSalonFound, err := FindBeauticianSalon(ctx, tx, o.BeauticianID, o.SalonID)
	if err != nil {
		t.Error(err)
	}

	if beauticianSalonFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBeauticianSalonsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BeauticianSalon{}
	if err = randomize.Struct(seed, o, beauticianSalonDBTypes, true, beauticianSalonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BeauticianSalons().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBeauticianSalonsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BeauticianSalon{}
	if err = randomize.Struct(seed, o, beauticianSalonDBTypes, true, beauticianSalonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BeauticianSalons().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBeauticianSalonsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	beauticianSalonOne := &BeauticianSalon{}
	beauticianSalonTwo := &BeauticianSalon{}
	if err = randomize.Struct(seed, beauticianSalonOne, beauticianSalonDBTypes, false, beauticianSalonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}
	if err = randomize.Struct(seed, beauticianSalonTwo, beauticianSalonDBTypes, false, beauticianSalonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = beauticianSalonOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = beauticianSalonTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BeauticianSalons().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBeauticianSalonsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	beauticianSalonOne := &BeauticianSalon{}
	beauticianSalonTwo := &BeauticianSalon{}
	if err = randomize.Struct(seed, beauticianSalonOne, beauticianSalonDBTypes, false, beauticianSalonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}
	if err = randomize.Struct(seed, beauticianSalonTwo, beauticianSalonDBTypes, false, beauticianSalonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = beauticianSalonOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = beauticianSalonTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BeauticianSalons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func beauticianSalonBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BeauticianSalon) error {
	*o = BeauticianSalon{}
	return nil
}

func beauticianSalonAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BeauticianSalon) error {
	*o = BeauticianSalon{}
	return nil
}

func beauticianSalonAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BeauticianSalon) error {
	*o = BeauticianSalon{}
	return nil
}

func beauticianSalonBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BeauticianSalon) error {
	*o = BeauticianSalon{}
	return nil
}

func beauticianSalonAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BeauticianSalon) error {
	*o = BeauticianSalon{}
	return nil
}

func beauticianSalonBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BeauticianSalon) error {
	*o = BeauticianSalon{}
	return nil
}

func beauticianSalonAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BeauticianSalon) error {
	*o = BeauticianSalon{}
	return nil
}

func beauticianSalonBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BeauticianSalon) error {
	*o = BeauticianSalon{}
	return nil
}

func beauticianSalonAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BeauticianSalon) error {
	*o = BeauticianSalon{}
	return nil
}

func testBeauticianSalonsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BeauticianSalon{}
	o := &BeauticianSalon{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, beauticianSalonDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon object: %s", err)
	}

	AddBeauticianSalonHook(boil.BeforeInsertHook, beauticianSalonBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	beauticianSalonBeforeInsertHooks = []BeauticianSalonHook{}

	AddBeauticianSalonHook(boil.AfterInsertHook, beauticianSalonAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	beauticianSalonAfterInsertHooks = []BeauticianSalonHook{}

	AddBeauticianSalonHook(boil.AfterSelectHook, beauticianSalonAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	beauticianSalonAfterSelectHooks = []BeauticianSalonHook{}

	AddBeauticianSalonHook(boil.BeforeUpdateHook, beauticianSalonBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	beauticianSalonBeforeUpdateHooks = []BeauticianSalonHook{}

	AddBeauticianSalonHook(boil.AfterUpdateHook, beauticianSalonAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	beauticianSalonAfterUpdateHooks = []BeauticianSalonHook{}

	AddBeauticianSalonHook(boil.BeforeDeleteHook, beauticianSalonBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	beauticianSalonBeforeDeleteHooks = []BeauticianSalonHook{}

	AddBeauticianSalonHook(boil.AfterDeleteHook, beauticianSalonAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	beauticianSalonAfterDeleteHooks = []BeauticianSalonHook{}

	AddBeauticianSalonHook(boil.BeforeUpsertHook, beauticianSalonBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	beauticianSalonBeforeUpsertHooks = []BeauticianSalonHook{}

	AddBeauticianSalonHook(boil.AfterUpsertHook, beauticianSalonAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	beauticianSalonAfterUpsertHooks = []BeauticianSalonHook{}
}

func testBeauticianSalonsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BeauticianSalon{}
	if err = randomize.Struct(seed, o, beauticianSalonDBTypes, true, beauticianSalonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BeauticianSalons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBeauticianSalonsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BeauticianSalon{}
	if err = randomize.Struct(seed, o, beauticianSalonDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(beauticianSalonColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BeauticianSalons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBeauticianSalonsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BeauticianSalon{}
	if err = randomize.Struct(seed, o, beauticianSalonDBTypes, true, beauticianSalonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBeauticianSalonsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BeauticianSalon{}
	if err = randomize.Struct(seed, o, beauticianSalonDBTypes, true, beauticianSalonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BeauticianSalonSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBeauticianSalonsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BeauticianSalon{}
	if err = randomize.Struct(seed, o, beauticianSalonDBTypes, true, beauticianSalonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BeauticianSalons().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	beauticianSalonDBTypes = map[string]string{`BeauticianID`: `bigint`, `SalonID`: `bigint`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`, `DeletedAt`: `datetime`}
	_                      = bytes.MinRead
)

func testBeauticianSalonsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(beauticianSalonPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(beauticianSalonAllColumns) == len(beauticianSalonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BeauticianSalon{}
	if err = randomize.Struct(seed, o, beauticianSalonDBTypes, true, beauticianSalonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BeauticianSalons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, beauticianSalonDBTypes, true, beauticianSalonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBeauticianSalonsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(beauticianSalonAllColumns) == len(beauticianSalonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BeauticianSalon{}
	if err = randomize.Struct(seed, o, beauticianSalonDBTypes, true, beauticianSalonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BeauticianSalons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, beauticianSalonDBTypes, true, beauticianSalonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(beauticianSalonAllColumns, beauticianSalonPrimaryKeyColumns) {
		fields = beauticianSalonAllColumns
	} else {
		fields = strmangle.SetComplement(
			beauticianSalonAllColumns,
			beauticianSalonPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BeauticianSalonSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBeauticianSalonsUpsert(t *testing.T) {
	t.Parallel()

	if len(beauticianSalonAllColumns) == len(beauticianSalonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBeauticianSalonUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BeauticianSalon{}
	if err = randomize.Struct(seed, &o, beauticianSalonDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BeauticianSalon: %s", err)
	}

	count, err := BeauticianSalons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, beauticianSalonDBTypes, false, beauticianSalonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BeauticianSalon struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BeauticianSalon: %s", err)
	}

	count, err = BeauticianSalons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
